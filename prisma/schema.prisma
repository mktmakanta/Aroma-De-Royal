//npx prisma generate

//npx prisma db push

//npx prisma studio



generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String   @unique
  emailVerified DateTime?
  password  String?
  image         String?
  role          String?  @default("user")
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[] @relation("UserProducts") 
  reviews  Review[]  @relation("UserReviews") 
  orders   Order[]   @relation("UserOrders")

  @@map("users")

}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}



model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation("UserProducts", fields: [userId], references: [id], onDelete:Cascade)
  name        String
  image       String
  brand         String
  category      String
  description   String
  price       Float    @default(0.0)
  countInStock  Int    @default(0)
  rating        Float

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reviews    Review[]    @relation("ProductReviews") 
  orderItems OrderItem[] @relation("ProductOrderItems")
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  userId     String      @db.ObjectId
  user       User        @relation("UserOrders", fields: [userId], references: [id]) 
  orderItems OrderItem[] @relation("OrderItems") 
  totalPrice Float       @default(0.0)

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation("ProductOrderItems", fields: [productId], references: [id], onDelete:Cascade) 
  orderId   String  @db.ObjectId
  order     Order   @relation("OrderItems", fields: [orderId], references: [id]) 
  quantity  Int
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation("UserReviews", fields: [userId], references: [id]) 
  productId String   @db.ObjectId
  product   Product  @relation("ProductReviews", fields: [productId], references: [id], onDelete:Cascade) 
  rating    Float
  comment   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
